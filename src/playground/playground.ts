// import * as Apply from 'fp-ts/Apply';
// import * as Array from 'fp-ts/Array';
// import * as Boolean from 'fp-ts/Boolean';
// import * as Bounded from 'fp-ts/Bounded';
// import * as Comonad from 'fp-ts/Comonad';
// import * as Contravariant from 'fp-ts/Contravariant';
// import * as Either from 'fp-ts/Either';
// import * as Eq from 'fp-ts/Eq';
// import * as Filterable from 'fp-ts/Filterable';
// import * as Foldable from 'fp-ts/Foldable';
// import * as Functor from 'fp-ts/Functor';
// import * as HKT from 'fp-ts/HKT';
// import * as Identity from 'fp-ts/Identity';
// import * as IO from 'fp-ts/IO';
// import * as IOEither from 'fp-ts/IOEither';
// import * as Map from 'fp-ts/Map';
// import * as Monad from 'fp-ts/Monad';
// import * as Monoid from 'fp-ts/Monoid';
// import * as NonEmptyArray from 'fp-ts/NonEmptyArray';
// import * as Option from 'fp-ts/Option';
// import * as Ord from 'fp-ts/Ord';
// import * as Ordering from 'fp-ts/Ordering';
// import * as Pipeable from 'fp-ts/Pipeable';
// import * as Reader from 'fp-ts/Reader';
// import * as ReaderTask from 'fp-ts/ReaderTask';
// import * as ReaderTaskEither from 'fp-ts/ReaderTaskEither';
// import * as Record from 'fp-ts/Record';
// import * as Ring from 'fp-ts/Ring';
// import * as Semigroup from 'fp-ts/Semigroup';
// import * as Semiring from 'fp-ts/Semiring';
// import * as Show from 'fp-ts/Show';
// import * as State from 'fp-ts/State';
// import * as StateReaderTaskEither from 'fp-ts/StateReaderTaskEither';
// import * as Store from 'fp-ts/Store';
// import * as Task from 'fp-ts/Task';
// import * as TaskEither from 'fp-ts/TaskEither';
// import * as These from 'fp-ts/These';
// import * as Traversable from 'fp-ts/Traversable';
// import * as Validation from 'fp-ts/Validation';
// import * as Witherable from 'fp-ts/Witherable';
// import { Endomorphism, flow, identity, pipe } from 'fp-ts/function';
// import { unsafeCoerce } from 'fp-ts/function';

import { unimplemented } from '../utils';

export const myFunction = unimplemented;
